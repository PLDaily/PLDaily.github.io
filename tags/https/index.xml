<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTPS on PLDaily Blog</title>
    <link>https://pldaily.github.io/tags/https/</link>
    <description>Recent content in HTTPS on PLDaily Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 26 Jan 2018 17:08:24 +0000</lastBuildDate>
    
	<atom:link href="https://pldaily.github.io/tags/https/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTPS 详解</title>
      <link>https://pldaily.github.io/posts/https-%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 26 Jan 2018 17:08:24 +0000</pubDate>
      
      <guid>https://pldaily.github.io/posts/https-%E8%AF%A6%E8%A7%A3/</guid>
      <description>&amp;lsquo;大家好，我是渣渣辉&amp;rsquo;。日常访问网站，随处可见的小弹窗，网页八成是被运营商劫持了。所谓运营商劫持是多指 HTTP 劫持，HTTP 协议是明文的，每次请求和响应的数据都需要经过运营商（电信、联通等），运营商便会在响应的数据中加入一些自己的东西（广告）。今年 7 月起，Chrome 浏览器会将把所有 HTTP 标示为不安全网站。故引出今天的主角 HTTPS。 HTTPS 是 HTTP 的安全形式，所有 HTTP 请求和响应的数据到达网络之前都要进行加密。
基础概念  TLS/SSL  用于 HTTPS 的编码与解码
 对称加密技术  加密解密使用相同的密钥相同
 非对称加密技术  加密解密使用不同的密钥，一般使用 RSA 算法
HTTPS 原理 HTTPS 是如何保证数据安全，以客户端向服务端请求数据为例：
 客户端向服务端请求数据，服务端将正文内容通过 HASH 算法处理，处理后的内容通过服务端密钥加密生成数字签名，向客户端发送正文内容及数字签名 客户端将请求到的正文内容经过相同的 HASH 算法处理，再将数字签名通过公钥解密，对照俩者的结果是否相同，如果相同则内容未被修改。  数字签名（digital signature）为非对称加密，只有一个私钥及多个公钥。但以上步骤中的公钥的来源很有可能是不安全的，为保证公钥的准确性，要去数字证书机构（简称 CA） 为公钥做认证。
数字证书也为非对称加密，将公钥及一些服务端的信息经过 CA 的私钥加密生成数字证书（证书包括签发者、证书用途、公钥、加密算法、HASH 算法、到期时间等）。客户端拿到数字证书通过 CA 的公钥解密得到数字签名的公钥，确保了公钥来源的安全性。
搭建 HTTPS 制作CA证书  生成CA私钥
openssl genrsa -out ca.key 1024  生成CA公钥
openssl req -new -x509 -days 7305 -key ca.</description>
    </item>
    
  </channel>
</rss>